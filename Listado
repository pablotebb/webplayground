Video 58

1. Creamos el entorno
2. django-admin startproject webplayground
3. Copiamos la aplicación core (que nos da el autor del video)
4. Registramos la aplicación
5. ...
6. python manage.py migrate
7. python manage.py runserver

Video 59

1. https://ccbv.co.uk/

Video 60

1. Registramos la aplicación
2. Como la app tiene modelos, vamos a tener que migrarla
   python manage.py makemigrations pages
   python manage.py migrate pages
3. Creamos un superusuario:
   python manage.py createsuperuser
4. Registramos ckeditor, que es una aplicación, que usa la aplicación 'pages'
5. Nos loggeamos como superusuario, y creamos una nueva página.

Video 61

1. https://gist.github.com/hcosta/143950b40dda8cf640076a629cec7f09
2. Con la que hemos cambiado, ahora para acceder a" una página sería "pages:pages", "pages:page" o "pages:create". Cogemos en el urs.py de pages, el name, como el nombre que viene después de :
3. https://gist.github.com/hcosta/456df0769f153a2458e711d3f78b75a2

Video 64

1. https://gist.github.com/hcosta/586f1354e662a25d43a1b2e66403eda9
2. Nota: en ¿Estás seguro de que quieres borrar "{{ object }}"?, el object se puede sustituir por un modelo.

Video 65

1. https://github.com/django-ckeditor/django-ckeditor#outside-of-django-admin
2. https://gist.github.com/hcosta/15ae0835e5824685d46e75f49efc1bcb

Video 68

1. python manage.py startapp registration
   (tiene que ser este nombre)
2. Es muy importante que la registremos arriba del todo, lo cual da prioridad, en caso de conflictos, sobre los demás programas
   INSTALLED_APPS = [
   'registration',
   'django.contrib.admin',
   'django.contrib.auth',
   'django.contrib.contenttypes',
   'django.contrib.sessions',
   'django.contrib.messages',
   'django.contrib.staticfiles',
   'ckeditor',
   'core',
   'pages.apps.PagesConfig',
   ]
3. Paramos servidor, y volvemos a arrancar...
4. Cuando nos loggemos en url/accounts/login, y nos validamos, nos
   redirecciona a: "http://127.0.0.1:8000/accounts/profile/", y nos da
   un error,porque no encuentra el directorio profile. Después lo crearemos.
5. Por ahora, vamos a settings.py a cambiar el redireccionamiento

Video 69

1. Ver "Pagina.png"

Video 71

1. El autor del video recomienda, una vez registrado, como nos conduce al login, y nos nos informa que estamos registrado, que pongamos el el url:
   127.0.0.1/accounts/login/?register, para que si detectamos en el formulario login, el '?register', pongamos un mensaje de: "Te has registrado correctamente, y que ya puede iniciar la sesión"

Video 75

1. Una vez añadido el código, si vamos al navegador, a "http://127.0.0.1:8000/accounts/password_reset/", nos aparece un formulario por defecto para restablecer la contraseña. Django los añade por defecto. Pero nosotros queremos uno personalizado. Por tanto, tendremos que sobreescribirlos.

Video 76

1. Tenemos que instalar pillow, para las imágenes

Video 77

1. python manage.py makemigrations registration
2. python manage.py migrate registration
3. Ojo para mandar archivos, ya sean imagenes o archivos, poner:
   <form action="" method="post" enctype="multipart/form-data">
4. Podemos acceder asi: {{request.user.profile.link}}

Video 78

1. En profile "profile_form.html", hacemos: <style>label{display:none}</style>, para ocultar las etiquetas

Video 81

1. python manage.py shell
   > > > from registration.models import Profile
   > > > Profile.objects.get(user\_\_username='pepito8')
   > > > <Profile: Profile object (2)>

Video 82

1. Como comprobar si hay un usuario creado por la shell, es bastante complicado. Vamos a crear una prueba unitaria, que se encargue de automatizar un procedimiento. El procedimento es que se cree un usuario, y luego comprobremos que se haya creado un perfil a ese propio usuario, para saber si nuestro código está funcionando correctamente.
2. Creamos el test.py
3. python manage.py test registration

Video 86

1. Para ver las paginas: http://127.0.0.1:8000/profiles/?page=2
2. La consola nos da este aviso: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'registration.models.Profile'> QuerySet.
   Para arreglarlo, modificamos el "models.py" de registration.
